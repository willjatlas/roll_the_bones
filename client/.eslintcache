[{"/Users/user/codeclan_work/projects/roll_the_bones/client/src/index.js":"1","/Users/user/codeclan_work/projects/roll_the_bones/client/src/reportWebVitals.js":"2","/Users/user/codeclan_work/projects/roll_the_bones/client/src/App.js":"3","/Users/user/codeclan_work/projects/roll_the_bones/client/src/containers/ScoreTable.js":"4","/Users/user/codeclan_work/projects/roll_the_bones/client/src/containers/GameDisplay.js":"5","/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/HomePage.js":"6","/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/NavBar.js":"7","/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/ErrorPage.js":"8","/Users/user/codeclan_work/projects/roll_the_bones/client/src/services/GameServices.js":"9","/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/Score.js":"10","/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/PlayerNameForm.js":"11","/Users/user/codeclan_work/projects/roll_the_bones/client/src/containers/DiceDisplay.js":"12","/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/Die.js":"13"},{"size":500,"mtime":1610200880600,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1610200880605,"results":"16","hashOfConfig":"15"},{"size":1704,"mtime":1610372519071,"results":"17","hashOfConfig":"15"},{"size":757,"mtime":1610368386587,"results":"18","hashOfConfig":"15"},{"size":4099,"mtime":1610372188061,"results":"19","hashOfConfig":"15"},{"size":691,"mtime":1610315648005,"results":"20","hashOfConfig":"15"},{"size":577,"mtime":1610363150873,"results":"21","hashOfConfig":"15"},{"size":138,"mtime":1610315648004,"results":"22","hashOfConfig":"15"},{"size":450,"mtime":1610297874549,"results":"23","hashOfConfig":"15"},{"size":133,"mtime":1610297874548,"results":"24","hashOfConfig":"15"},{"size":789,"mtime":1610364189143,"results":"25","hashOfConfig":"15"},{"size":347,"mtime":1610315648007,"results":"26","hashOfConfig":"15"},{"size":997,"mtime":1610315648003,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"xpmnjc",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/user/codeclan_work/projects/roll_the_bones/client/src/index.js",[],["57","58"],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/reportWebVitals.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/App.js",["59"],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/containers/ScoreTable.js",["60"],"import Score from \"../components/Score\";\n\nconst ScoreTable = ({highScores}) => {\n    // // TODO: possibly .sort on scores so that they display by score value\n    // function sortTheScores() {\n    //     const scoreA = scoreA[key];\n    //     const scoreB = scoreB[key];\n\n    //     let comparison = 0;\n    //     if (scoreA > scoreB) {\n    //         comparison = 1;\n    //     } else if (scoreA < scoreB) {\n    //         comparison = -1;\n    //     }\n    //     return comparison;\n    // }\n\n    const scores = highScores.map((element) => {\n        return <li> NAME: { element.playerName } SCORE: { element.score }</li>\n    });\n\n    return (\n        <>\n        <h3>High Scores</h3>\n        <ol>{scores}</ol>\n        </>\n    )\n};\n\nexport default ScoreTable;","/Users/user/codeclan_work/projects/roll_the_bones/client/src/containers/GameDisplay.js",["61","62","63"],"import {useState, useEffect} from \"react\";\nimport DiceDisplay from \"./DiceDisplay\";\nimport PlayerNameForm from \"../components/PlayerNameForm\";\n\nconst GameDisplay = ({checkNewHighScore})=>{\n\n    // Dice currently hard coded, could use method to return array \n    // of dice objects, given how many dice to use. \n    const dice  = {value: 1, active: true , min: 1, max: 6}\n    const dice2 = {value: 1, active: true , min: 1, max: 6}\n    const dice3 = {value: 1, active: true , min: 1, max: 6}\n    const dice4 = {value: 1, active: true , min: 1, max: 6}\n    const dice5 = {value: 1, active: true , min: 1, max: 6}\n    const stickNumber = 5; \n\n    // Game States\n    const [playerName, setPlayerName]   = useState(\"\");\n    const [playerScore, setPlayerScore] = useState(0);\n    const [turnScore, setTurnScore]     = useState(0);\n    const [availDice, setAvailDice]     = useState([dice, dice2, dice3, dice4, dice5]);\n    const [gameState, setGameState]     = useState(true);\n    const [btnDisable, setBtnDisable]   = useState(true);\n    const [plyrNmDsbl, setPlyrNmDsbl]   = useState(false);\n    const [highScore, setHighScore]     = useState(false)\n\n    // Adds the entered player name to the state\n    const handleName = (name)=>{\n        setPlayerName(name);\n        setBtnDisable(false);\n        setPlyrNmDsbl(true);\n    };\n    \n    // Add the roll value to the players score. \n    const addToPlayerScore = (value)=>{\n        let tempNum = playerScore;\n        setPlayerScore(value + tempNum);\n    }\n\n    // Will return a random number between min & max.\n    const getRandomInt = (min, max)=>{\n        return Math.floor(Math.random() * max) + min;\n    }\n\n    // Takes availDice and rolls new values.\n    const rollDiceValues = ()=>{\n        let newDiceArray = availDice.map((element)=>{\n            element.value = getRandomInt(element.min, element.max)\n            return(element);\n        })\n        console.log(`new dice array is : ${newDiceArray}`)\n        setAvailDice(newDiceArray);\n    }\n\n    // Checks a roll for sticking numbers and deactivates die.\n    const checkForStickNums = ()=>{\n        let newDiceArray = availDice.map((element)=>{\n            if(element.value === stickNumber){\n                element.active = false;\n            }\n            return(element);\n        });\n        console.log(`new dice array is : ${newDiceArray}`)\n        setAvailDice(newDiceArray);\n    };\n\n    // Calculates the players score and and adds it\n    // to the playerScore, sets turnScore. \n    const calculateRoll = ()=>{\n        let total = 0;\n        availDice.forEach((element) => {\n            if(element.active === true){\n                total += element.value;\n            } \n        });\n        setTurnScore(total)\n        addToPlayerScore(total);\n    };\n\n    // Checks for active dice.\n    const checkDieAvailable = (diceList)=>{\n        let boolList = diceList.map(element=>element.active);\n        let output   = boolList.includes(true);\n        return output;\n    };\n \n    // Handles the roll dice button for the game. \n    const handleRollButton = ()=>{\n        if(checkDieAvailable(availDice) !== false){\n            rollDiceValues();\n            checkForStickNums();\n            calculateRoll();\n            if (checkDieAvailable(availDice) === false){\n                setGameState(false);\n            };\n        };\n    };\n\n    // watches the game state for when the game is finished. \n    useEffect(()=>{\n        // If statement catches init render.\n        if(gameState !== true){\n            setBtnDisable(true);\n            setHighScore(checkNewHighScore(playerName, playerScore))\n        }\n    }, [gameState])\n\n    return(\n        <div id=\"game-display\">\n            <PlayerNameForm handleName={handleName} />\n            <h2>Player Score: {playerScore}</h2>\n            <h2>Score This Turn: {turnScore}</h2>\n            <button id=\"roll-dice-button\" \n                    onClick={handleRollButton} \n                    disabled={btnDisable}> Roll Dice \n            </button>\n            <DiceDisplay diceList = {availDice}/>\n        </div>\n    );\n\n};\n\nexport default GameDisplay;","/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/HomePage.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/NavBar.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/ErrorPage.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/services/GameServices.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/Score.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/PlayerNameForm.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/containers/DiceDisplay.js",[],"/Users/user/codeclan_work/projects/roll_the_bones/client/src/components/Die.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":35,"column":40,"nodeType":"70","messageId":"71","endLine":35,"endColumn":42},{"ruleId":"72","severity":1,"message":"73","line":1,"column":8,"nodeType":"74","messageId":"75","endLine":1,"endColumn":13},{"ruleId":"72","severity":1,"message":"76","line":23,"column":12,"nodeType":"74","messageId":"75","endLine":23,"endColumn":22},{"ruleId":"72","severity":1,"message":"77","line":24,"column":12,"nodeType":"74","messageId":"75","endLine":24,"endColumn":21},{"ruleId":"78","severity":1,"message":"79","line":105,"column":8,"nodeType":"80","endLine":105,"endColumn":19,"suggestions":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Score' is defined but never used.","Identifier","unusedVar","'plyrNmDsbl' is assigned a value but never used.","'highScore' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkNewHighScore', 'playerName', and 'playerScore'. Either include them or remove the dependency array. If 'checkNewHighScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["84"],"no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},"Update the dependencies array to be: [checkNewHighScore, gameState, playerName, playerScore]",{"range":"87","text":"88"},[3616,3627],"[checkNewHighScore, gameState, playerName, playerScore]"]