[{"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/index.js":"1","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/reportWebVitals.js":"2","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/App.js":"3","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/HomePage.js":"4","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/ScoreTable.js":"5","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/NavBar.js":"6","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/ErrorPage.js":"7","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/services/GameServices.js":"8","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/GameDisplay.js":"9","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/CardDisplay.js":"10","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/ResultsPage.js":"11","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/Score.js":"12","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/DiceDisplay.js":"13","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/PlayerNameForm.js":"14","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/CardBoard.js":"15","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/Die.js":"16","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/Card.js":"17"},{"size":613,"mtime":1610523770860,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1610201929827,"results":"20","hashOfConfig":"19"},{"size":2155,"mtime":1610523770849,"results":"21","hashOfConfig":"19"},{"size":694,"mtime":1610388655931,"results":"22","hashOfConfig":"19"},{"size":348,"mtime":1610388655934,"results":"23","hashOfConfig":"19"},{"size":695,"mtime":1610534610506,"results":"24","hashOfConfig":"19"},{"size":138,"mtime":1610361209989,"results":"25","hashOfConfig":"19"},{"size":450,"mtime":1610308208403,"results":"26","hashOfConfig":"19"},{"size":4885,"mtime":1610523770851,"results":"27","hashOfConfig":"19"},{"size":1804,"mtime":1610523770851,"results":"28","hashOfConfig":"19"},{"size":1012,"mtime":1610523770850,"results":"29","hashOfConfig":"19"},{"size":143,"mtime":1610388655932,"results":"30","hashOfConfig":"19"},{"size":365,"mtime":1610388655933,"results":"31","hashOfConfig":"19"},{"size":951,"mtime":1610523770850,"results":"32","hashOfConfig":"19"},{"size":2851,"mtime":1610523770850,"results":"33","hashOfConfig":"19"},{"size":997,"mtime":1610361209989,"results":"34","hashOfConfig":"19"},{"size":316,"mtime":1610388655929,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"ouk7ne",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/index.js",[],["74","75"],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/reportWebVitals.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/App.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/HomePage.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/ScoreTable.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/NavBar.js",["76","77","78"],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/ErrorPage.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/services/GameServices.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/GameDisplay.js",["79"],"import {useState, useEffect} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport DiceDisplay from \"./DiceDisplay\";\nimport PlayerNameForm from \"../components/PlayerNameForm\";\n\nconst GameDisplay = ({checkNewHighScore})=>{\n\n    // Dice currently hard coded, could use method to return array \n    // of dice objects, given how many dice to use. \n    const dice  = {value: 1, active: true , min: 1, max: 6}\n    const dice2 = {value: 1, active: true , min: 1, max: 6}\n    const dice3 = {value: 1, active: true , min: 1, max: 6}\n    const dice4 = {value: 1, active: true , min: 1, max: 6}\n    const dice5 = {value: 1, active: true , min: 1, max: 6}\n    const stickNumbers = [2,5]; \n\n    // Game States\n    const [playerName, setPlayerName]   = useState(\"Player\");\n    const [playerScore, setPlayerScore] = useState(0);\n    const [turnScore, setTurnScore]     = useState(0);\n    const [availDice, setAvailDice]     = useState([dice, dice2, dice3, dice4, dice5]);\n    const [gameState, setGameState]     = useState(true);\n    \n    \n    const [highScore, setHighScore]     = useState(false);\n    const [plyrNmDsbl, setPlyrNmDsbl]   = useState(false);\n    const [btnDisable, setBtnDisable]   = useState(true);\n    const [finBtnDsbl, setFinButDsble]  = useState(true);\n\n    // Adds the entered player name to the state\n    const handleName = (name)=>{\n        setPlayerName(name);\n        setBtnDisable(false);\n        setPlyrNmDsbl(true);\n    };\n    \n    // Add the roll value to the players score. \n    const addToPlayerScore = (value)=>{\n        let tempNum = playerScore;\n        setPlayerScore(value + tempNum);\n    }\n\n    // Will return a random number between min & max.\n    const getRandomInt = (min, max)=>{\n        return Math.floor(Math.random() * max) + min;\n    }\n\n    // Takes availDice and rolls new values.\n    const rollDiceValues = ()=>{\n        let newDiceArray = availDice.map((element)=>{\n            element.value = getRandomInt(element.min, element.max)\n            return(element);\n        })\n        console.log(`new dice array is : ${newDiceArray}`)\n        setAvailDice(newDiceArray);\n    }\n\n    // Checks a roll for sticking numbers and deactivates die.\n    const checkForStickNums = ()=>{\n        let newDiceArray = availDice.map((element)=>{\n            if(stickNumbers.includes(element.value) === true){\n                element.active = false;\n            }\n            return(element);\n        });\n        console.log(`new dice array is : ${newDiceArray}`)\n        setAvailDice(newDiceArray);\n    };\n\n    // Calculates the players score and and adds it\n    // to the playerScore, sets turnScore. \n    const calculateRoll = ()=>{\n        let total = 0;\n        availDice.forEach((element) => {\n            if(element.active === true){\n                total += element.value;\n            } \n        });\n        setTurnScore(total)\n        addToPlayerScore(total);\n    };\n\n    // Checks for active dice.\n    const checkDieAvailable = (diceList)=>{\n        let boolList = diceList.map(element=>element.active);\n        let output   = boolList.includes(true);\n        return output;\n    };\n \n    // Handles the roll dice button for the game. \n    const handleRollButton = ()=>{\n        if(checkDieAvailable(availDice) !== false){\n            rollDiceValues();\n            checkForStickNums();\n            calculateRoll();\n            if (checkDieAvailable(availDice) === false){\n                setGameState(false);\n            };\n        };\n    };\n    \n    // watches the game state for when the game is finished. \n    useEffect(()=>{\n        // If statement catches init render.\n        if(gameState !== true){\n            setBtnDisable(true);\n            setFinButDsble(false);\n            setHighScore(checkNewHighScore(playerName, playerScore))\n        }\n    }, [gameState]);\n\n    return(\n        <div id=\"game-display\">\n            <PlayerNameForm handleName={handleName} \n                            disabled={plyrNmDsbl}  />\n                            \n            <h2>{playerName}'s Score : {playerScore}</h2>\n            <h2>Score This Turn: {turnScore}</h2>\n            <button id=\"buttons\" \n                    onClick={handleRollButton} \n                    disabled={btnDisable}> ROLL YER DICE! \n            </button>\n            <DiceDisplay diceList = {availDice}/>\n            <div id=\"results-link-wrap\" \n                 style={finBtnDsbl ? {pointerEvents: \"none\", \n                                      opacity: \"0.0\"} : {}}>\n                <Link id=\"results-link\"\n                    to={{\n                        pathname: \"/resultsPage\",\n                        state:{\n                            playerName,\n                            playerScore,\n                            highScore\n                        }\n                    }}> SEE YER RESULTS!</Link>\n            </div>\n        </div>\n    );\n\n};\n\nexport default GameDisplay;\n","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/CardDisplay.js",["80"],"import React, {useState} from 'react';\nimport CardBoard from \"../components/CardBoard\";\nimport backImg from \"../card_images/back.jpeg\";\nimport jack1 from \"../card_images/jack1.jpeg\";\nimport jack2 from \"../card_images/jack2.jpeg\";\nimport jack3 from \"../card_images/jack3.jpeg\";\nimport jack4 from \"../card_images/jack4.jpeg\";\nimport jack5 from \"../card_images/jack5.jpeg\";\nimport jack6 from \"../card_images/jack6.jpeg\";\nimport jack7 from \"../card_images/jack7.jpeg\";\nimport jack8 from \"../card_images/jack8.jpg\";\n\nconst CardDisplay = () => {\n    const cards = buildCards()\n    return (\n        <div className=\"CardDisplay\">\n            <CardBoard cards={cards} />\n        </div>\n    )\n}\n\n    function buildCards() {\n        let id = 0\n        const images = {jack1, jack2, jack3, jack4, jack5, jack6, jack7, jack8}\n        const cards = Object.keys(images).reduce((result, item) => {\n            const createCard = () => ({\n                id: id++, // Unique identify of each card\n                type: item, // Value to check if 2 cards open are same type\n                backImg: backImg, // The placeholder image when card is closed \n                frontImg: images[item], // The image shown when the card is open\n                flipped: false, // Value to check is card is open or closed\n            })\n            return [...result, createCard(), createCard()]\n        }, [])\n        return shuffle(cards)\n    }\n\n    function shuffle(arr) {\n        let len = arr.length\n        for (let i = 0; i < len; i++) {\n            let randomIdx = Math.floor(Math.random() * len)\n            let copyCurrent = {...arr[i]}\n            let copyRandom = {...arr[randomIdx]}\n            arr[i] = copyRandom\n            arr[randomIdx] = copyCurrent\n        }\n        return arr\n    }\n\n\nexport default CardDisplay;","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/ResultsPage.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/Score.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/containers/DiceDisplay.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/PlayerNameForm.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/CardBoard.js",["81"],"import React, {useState, useEffect} from 'react'\nimport Card from \"./Card\";\nimport '../App.css';\n\nconst CardBoard = props => {\n  const [cards, setCards] = useState(props.cards)\n  const [checkers, setCheckers] = useState([])\n  const [completed, setCompleted] = useState([])\n  const onCardClick = card => () => {\n    if (checkersFull(checkers) || cardAlreadyInCheckers(checkers, card)) return\n    const newCheckers = [...checkers, card]\n    setCheckers(newCheckers)\n    const cardsInCheckersMatched = validateCheckers(newCheckers)\n    if (cardsInCheckersMatched) {\n      setCompleted([...completed, newCheckers[0].type])\n    }\n    if (checkersFull(newCheckers)) {\n      resetCheckersAfter(1000)\n    }\n    function validateCheckers(checkers){\n      return checkers.length === 2 &&\n      checkers[0].type === checkers[1].type\n    }\n    function cardAlreadyInCheckers(checkers, card){\n      return checkers.length === 1 && checkers[0].id === card.id\n    }\n    function checkersFull(checkers){\n      return checkers.length === 2\n    }\n    function resetCheckersAfter(time) {\n      setTimeout(() => {\n        setCheckers([])\n      }, time)\n    }\n  }\n\n  useEffect(() => {\n    const newCards = cards.map(card => ({\n      ...card,\n      flipped:\n        checkers.find(c => c.id === card.id) ||\n        completed.includes(card.type),\n    }))\n    setCards(newCards)\n  }, [checkers, completed])\n\n  function startTime () {\n    var timeContainer = document.getElementById(\"timer-value\");\n    var startButton = document.getElementById(\"start-game\");\n    var timer = 0;\n    var maxTime = 40;\n    var timeout = null;\n    function count () {\n      timeout = setTimeout(function() {\n        if (timer < maxTime) {\n          timer++;\n          timeContainer.innerText = timer;\n          count();\n        }\n        else {\n          alert(\"Time is up! ye failed its th' plank wit' ye!\");\n          startButton.style.display = \"inline-block\";\n        }\n      }, 1000);\n    }\n    function endGame () {\n      clearTimeout(timeout);\n      startButton.style.display = \"inline-block\";\n      alert(\"Ye completed th' game in this time! Jack Sparrow be Yo Ho Ho!\");\n    }\n\n    function startGame () {\n      if (timeout) { clearTimeout(timeout); }\n      timer = 0;\n      timeContainer.innerText = timer;\n      this.style.display = \"none\";\n      count();\n    }\n    document.getElementById(\"start-game\").addEventListener(\"click\", startGame);\n    document.getElementById(\"end-game\").addEventListener(\"click\", endGame);\n  }\n\n  return (\n    <div className=\"CardBoard\">\n      {cards.map(card => (\n        <Card {...card} onClick={onCardClick(card)} key={card.id} />\n      ))}\n      <h3>Timer: <span id=\"timer-value\">0</span></h3>\n      <button id=\"start-game\" onClick={startTime}>Start Game</button>\n      <button id=\"end-game\">End Game</button>\n    </div>\n  )\n}\n\n\nexport default CardBoard;","/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/Die.js",[],"/Users/codeclanstudent/codeclan_work/week_9/group_proj/roll_the_bones/client/src/components/Card.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":6,"column":11,"nodeType":"88","messageId":"89","endLine":6,"endColumn":15},{"ruleId":"90","severity":1,"message":"91","line":12,"column":17,"nodeType":"92","endLine":12,"endColumn":53},{"ruleId":"93","severity":1,"message":"94","line":12,"column":25,"nodeType":"95","messageId":"96","endLine":12,"endColumn":52},{"ruleId":"97","severity":1,"message":"98","line":110,"column":8,"nodeType":"99","endLine":110,"endColumn":19,"suggestions":"100"},{"ruleId":"86","severity":1,"message":"101","line":1,"column":16,"nodeType":"88","messageId":"89","endLine":1,"endColumn":24},{"ruleId":"97","severity":1,"message":"102","line":45,"column":6,"nodeType":"99","endLine":45,"endColumn":27,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'back' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkNewHighScore', 'playerName', and 'playerScore'. Either include them or remove the dependency array. If 'checkNewHighScore' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["106"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'cards'. Either include it or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [checkNewHighScore, gameState, playerName, playerScore]",{"range":"112","text":"113"},"Update the dependencies array to be: [cards, checkers, completed]",{"range":"114","text":"115"},[3790,3801],"[checkNewHighScore, gameState, playerName, playerScore]",[1359,1380],"[cards, checkers, completed]"]